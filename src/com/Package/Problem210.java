package com.Package;

public class Problem210 {
    // N(12) = 226
    // N(1000) = 1597880
    // N(10000) = 159814790
    // N(100000) = 15981722482
    // N(1000000) = 1598174519142
    static final long r =  1_000_000_000L;
    static final double sq2 = 1.4142135623730D;
    static final double radius =  (r/8D) * sq2; //176776695.296D;
    static final long rows = (long) -Math.floor(radius - (r/8D));//-51776695;

    public void run(){
        long b1 = 3L * r;
        long i1 = r*r - ((3L*r)/2L) + 1;
        long b2 = (5L*r)/2;
        long i2 = (r*r/2L) - ((5L*r)/4L) + 1;
        long temp = (r*r/16L) - (r/2L) + 1;
        long points = b1 + i1 +b2 + i2 - 2 * (r) - 5 + temp;

        long x = 0;
        double limit = (r*r)/32.0D;
        for(long y = -1; y >= rows; y--){
            long pos = (x - (r/8L))*(x - (r/8L)) + (y - (r/8L))*(y - (r/8L));
            while (pos >= limit){
                x++;
                pos = (x - (r/8L))*(x - (r/8L)) + (y - (r/8L))*(y - (r/8L));
            }
            long toAdd = 1 + ((r/8L) - x)*2;
            //System.out.println("y = "+ y + ", x = " + x + ", add = " + toAdd);
            points += toAdd * 4;
        }

        System.out.println("the answer = " + points);

    }







    /*
                                                        *
                                                      * * *
                                                    * * * * *
                                                  * * * * * * *
                                                * * * * * * * * *
                                              * * * * * * * * * * *
                                            4 * * * * * * * * * * * *
                                          4 3 2 * * * * * * * * * * * *
                                        4 3 2 1 0 * * * * * * * * * * * *
                                      4 3 2 1 0 9 8 * * * * * * * * * * * *
                                    4 3 2 1 0 9 8 7 6 * * * * * * * * * * * *
                                  4 3 2 1 0 9 8 7 6 5 4 * * * * * * * * * * * *
                                4 3 2 1 0 9 8 7 6 5 4 3 2 * * * * * * * * * * * 4
                              * * 2 1 0 9 8 7 6 5 4 3 2 1 2 * * * * * * * * * 2 * *
                            * * * * 0 9 8 7 6 5 4 3 2 1 0 1 2 * * * * * * * 0 * * * *
                          * * * * * * 8 7 6 5 4 3 2 1 0 9 0 1 2 * * * * * 8 * * * * * *
                        * * * * * * * * 6 5 4 3 2 1 0 9 8 9 0 1 2 * * * 6 * * * * * * * *
                      * * * * * * * * * * 4 3 2 1 0 9 8 7 8 * * * 2 * 4 * * * * * * * * * *
                    * * * * * * * * * * * * 2 1 0 9 8 7 6 * * * * * 2 * * * * * * * * * * * *
                  * * * * * * * * * * * * * * 0 9 8 7 6 * * * * * 0 * 2 * * * * * * * * * * * *
                * * * * * * * * * * * * * * * * 8 7 6 * * * * * 8 * * * 2 * * * * * * * * * * * *
              * * * * * * * * * * * * * * * * * * 6 5 * * * * 6 * * * * 1 2 * * * * * * * * * * * *
            * * * * * * * * * * * * * * * * * * * * 4 * * * 4 * * * * * 0 1 2 * * * * * * * * * * * *
          * * * * * * * * * * * * * * * * * * * * * * 2 * 2 * * * * * 8 9 0 1 2 * * * * * * * * * * * *
        * * * * * * * * * * * * * * * * * * * * * * * * 0 * * * * * 6 7 8 9 0 1 2 * * * * * * * * * * * *
          * * * * * * * * * * * * * * * * * * * * * * 2 * 2 * * * 6 7 8 9 0 1 2 3 4 * * * * * * * * * *
            * * * * * * * * * * * * * * * * * * * * 4 * * * 4 5 6 7 8 9 0 1 2 3 4 5 6 * * * * * * * *
              * * * * * * * * * * * * * * * * * * 6 * * * * * 6 7 8 9 0 1 2 3 4 5 6 7 8 * * * * * *
                * * * * * * * * * * * * * * * * 8 * * * * * * * 8 9 0 1 2 3 4 5 6 7 8 9 0 * * * *
                  * * * * * * * * * * * * * * 0 * * * * * * * * * 0 1 2 3 4 5 6 7 8 9 0 1 2 * *
                    * * * * * * * * * * * * 2 * * * * * * * * * * * 2 3 4 5 6 7 8 9 0 1 2 3 4
                      * * * * * * * * * * 4 * * * * * * * * * * * * * 4 5 6 7 8 9 0 1 2 3 4
                        * * * * * * * * 6 * * * * * * * * * * * * * * * 6 7 8 9 0 1 2 3 4
                          * * * * * * 8 * * * * * * * * * * * * * * * * * 8 9 0 1 2 3 4
                            * * * * 0 * * * * * * * * * * * * * * * * * * * 0 1 2 3 4
                              * * 2 * * * * * * * * * * * * * * * * * * * * * 2 3 4
                                4 * * * * * * * * * * * * * * * * * * * * * * * 4
                                  * * * * * * * * * * * * * * * * * * * * * * *
                                    * * * * * * * * * * * * * * * * * * * * *
                                      * * * * * * * * * * * * * * * * * * *
                                        * * * * * * * * * * * * * * * * *
                                          * * * * * * * * * * * * * * *
                                            * * * * * * * * * * * * *
                                              * * * * * * * * * * *
                                                * * * * * * * * *
                                                  * * * * * * *
                                                    * * * * *
                                                      * * *
                                                        *


                                */
}
